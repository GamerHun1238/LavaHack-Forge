package com.kisman.cc.features.module.exploit;

import com.kisman.cc.features.module.Category;
import com.kisman.cc.features.module.Module;
import com.kisman.cc.settings.Setting;
import com.kisman.cc.util.entity.player.InventoryUtil;
import com.kisman.cc.util.entity.player.PlayerUtil;
import net.minecraft.init.Items;
import net.minecraft.item.ItemAppleGold;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumHand;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class PacketEat extends Module {
    private final Setting mode = register(new Setting("Mode", this, Mode.Packet));
    private final Setting health = register(new Setting("Health", this, 28.0, 0.0, 36.0, false));
    private final Setting packetSize = register(new Setting("Packet Iteration", this, 20.0, 0.0, 40.0, false));

    public PacketEat() {
        super("PacketEat", Category.EXPLOIT);

    }

    public boolean isBeta() {return true;}

    @Override
    public void update() {
            if(mc.player == null) return;

            if (mc.player.isHandActive() && mc.player.getHeldItemMainhand().getItem() instanceof ItemAppleGold && (mode.getValEnum() == Mode.Packet || mode.getValEnum() == Mode.Auto)) {
                for (int i = 0; i < packetSize.getValInt(); ++i) mc.player.connection.sendPacket(new CPacketPlayer());
                mc.player.stopActiveHand();
            }

            if (mode.getValEnum() == Mode.Auto && PlayerUtil.getHealth() <= health.getValInt()) {
                InventoryUtil.switchToSlotGhost(InventoryUtil.getHotbarItemSlot(Items.GOLDEN_APPLE));
                PacketEat.mc.player.connection.sendPacket(new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));
            }
        super.update();
    }

    @SubscribeEvent
    public void onPlayerRightClick(final PlayerInteractEvent.RightClickItem event) {
        if (event.getItemStack().getItem().equals(Items.GOLDEN_APPLE) && mode.getValEnum() == Mode.Desync) {
            event.getItemStack().getItem().onItemUseFinish(event.getItemStack(), event.getWorld(), event.getEntityPlayer());
            event.setCanceled(true);
        }
    }

    public enum Mode {
        Packet,
        Desync,
        Auto;
    }
}
