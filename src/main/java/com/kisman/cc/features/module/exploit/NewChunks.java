package com.kisman.cc.features.module.exploit;

import com.kisman.cc.Kisman;
import com.kisman.cc.event.events.PacketEvent;
import com.kisman.cc.features.module.Category;
import com.kisman.cc.features.module.Module;
import com.kisman.cc.settings.Setting;
import com.kisman.cc.settings.util.RenderingRewritePattern;
import com.kisman.cc.util.collections.Pair;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.util.List;
import java.util.Vector;
import java.util.stream.Collectors;

public class NewChunks extends Module {

    private final Setting range = register(new Setting("Range", this,  8, 4, 128, true));
    private final RenderingRewritePattern renderer = new RenderingRewritePattern(this).init();

    public NewChunks(){
        super("NewChunks", Category.EXPLOIT);
    }

    // vector is a thread safe list
    private List<Pair<Integer>> list = new Vector<>();

    @Override
    public void onEnable(){
        if(mc.player == null || mc.world == null){
            toggle();
            return;
        }
        Kisman.EVENT_BUS.subscribe(listener);
    }

    @Override
    public void onDisable(){
        Kisman.EVENT_BUS.unsubscribe(listener);
        list.clear();
    }

    private final Listener<PacketEvent.Receive> listener = new Listener<>(event -> {
        if(!(event.getPacket() instanceof SPacketChunkData))
            return;
        SPacketChunkData packet = (SPacketChunkData) event.getPacket();
        if(packet.isFullChunk())
            return;
        Pair<Integer> pair = new Pair<>(packet.getChunkX() * 16, packet.getChunkZ() * 16);
        if(!list.contains(pair))
            list.add(pair);
    });

    @SubscribeEvent
    public void onRender(RenderWorldLastEvent event){
        if(mc.player == null || mc.world == null)
            return;

        if(!isToggled())
            return;

        list = list.stream().filter(integerPair -> mc.player.getDistanceSq(integerPair.getFirst() + 8, mc.player.posY, integerPair.getSecond() + 8) <= range.getValInt()).collect(Collectors.toList());

        for(Pair<Integer> pair : list){
            AxisAlignedBB aabb = new AxisAlignedBB(pair.getFirst(), 0, pair.getSecond(), pair.getFirst() + 16, 0, pair.getSecond() + 16);
            renderer.draw(aabb);
        }
    }
}
