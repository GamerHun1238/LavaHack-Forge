package com.kisman.cc.features.module.exploit;

import com.kisman.cc.Kisman;
import com.kisman.cc.event.events.EventPlayerDamageBlock;
import com.kisman.cc.features.module.Category;
import com.kisman.cc.features.module.Module;
import com.kisman.cc.settings.types.SettingEnum;
import com.kisman.cc.util.entity.player.InventoryUtil;
import me.zero.alpine.listener.Listener;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketHeldItemChange;

public class HandMineRewrite extends Module {

    private final SettingEnum<Mode> mode = new SettingEnum<>("Mode", this, Mode.Silent).register();

    public HandMineRewrite(){
        super("HandMine", Category.EXPLOIT);
    }

    private int slot = -1;

    private int oldSlot = -1;

    @Override
    public void onEnable() {
        super.onEnable();
        if(mc.player == null || mc.world == null){
            toggle();
            return;
        }
        slot = -1;
        oldSlot = -1;
        Kisman.EVENT_BUS.subscribe(preListener);
        Kisman.EVENT_BUS.subscribe(postListener);
    }

    @Override
    public void onDisable() {
        super.onDisable();
        Kisman.EVENT_BUS.unsubscribe(preListener);
        Kisman.EVENT_BUS.unsubscribe(postListener);
    }

    private final Listener<EventPlayerDamageBlock.After> preListener = new Listener<>(event -> {
        oldSlot = mc.player.inventory.currentItem;
        slot = InventoryUtil.findBestToolSlot(event.getPos());
        if(slot == -1)
            return;
        switch(mode.getValEnum()){
            case Silent:
                mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
                mc.player.inventory.currentItem = slot;
                mc.playerController.currentPlayerItem = slot;
                break;
            case Click:
                short id = mc.player.openContainer.getNextTransactionID(mc.player.inventory);
                ItemStack itemStack = mc.player.openContainer.slotClick(slot + 36, mc.player.inventory.currentItem, ClickType.SWAP, mc.player);
                mc.player.connection.sendPacket(new CPacketClickWindow(mc.player.inventoryContainer.windowId, slot + 36, mc.player.inventory.currentItem, ClickType.SWAP, itemStack, id));
                break;
            case Client:
                mc.player.inventory.currentItem = slot;
                mc.playerController.currentPlayerItem = slot;
                break;
            case Fake:
                short transferId = mc.player.openContainer.getNextTransactionID(mc.player.inventory);
                ItemStack stack = mc.player.inventory.getStackInSlot(slot);
                mc.player.connection.sendPacket(new CPacketClickWindow(mc.player.inventoryContainer.windowId, slot + 36, mc.player.inventory.currentItem, ClickType.SWAP, stack, transferId));
                mc.player.inventory.currentItem = slot;
                mc.playerController.currentPlayerItem = slot;
                break;
        }
    });

    private final Listener<EventPlayerDamageBlock.Post> postListener = new Listener<>(event -> {
        if(slot == -1 || oldSlot == -1)
            return;
        switch(mode.getValEnum()){
            case Silent:
                mc.player.connection.sendPacket(new CPacketHeldItemChange(oldSlot));
                mc.player.inventory.currentItem = oldSlot;
                mc.playerController.currentPlayerItem = oldSlot;
                break;
            case Click:
                short id = mc.player.openContainer.getNextTransactionID(mc.player.inventory);
                ItemStack itemStack = mc.player.openContainer.slotClick(slot + 36, mc.player.inventory.currentItem, ClickType.SWAP, mc.player);
                mc.player.connection.sendPacket(new CPacketClickWindow(mc.player.inventoryContainer.windowId, slot + 36, mc.player.inventory.currentItem, ClickType.SWAP, itemStack, id));
                break;
            case Client:
                mc.player.inventory.currentItem = oldSlot;
                mc.playerController.currentPlayerItem = oldSlot;
                break;
            case Fake:
                short transferId = mc.player.openContainer.getNextTransactionID(mc.player.inventory);
                ItemStack stack = mc.player.inventory.getStackInSlot(oldSlot);
                mc.player.connection.sendPacket(new CPacketClickWindow(mc.player.inventoryContainer.windowId, slot + 36, mc.player.inventory.currentItem, ClickType.SWAP, stack, transferId));
                mc.player.inventory.currentItem = oldSlot;
                mc.playerController.currentPlayerItem = oldSlot;
                break;
        }
    });

    private enum Mode {
        Silent,
        Click,
        Client,
        Fake
    }
}
