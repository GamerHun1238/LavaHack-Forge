package com.kisman.cc.features.module.exploit

import com.kisman.cc.Kisman
import com.kisman.cc.event.events.PacketEvent
import com.kisman.cc.features.module.Category
import com.kisman.cc.features.module.Module
import com.kisman.cc.settings.Setting
import com.kisman.cc.settings.types.SettingGroup
import com.kisman.cc.settings.types.number.NumberType
import com.kisman.cc.util.chat.cubic.ChatUtility
import me.zero.alpine.listener.EventHook
import me.zero.alpine.listener.Listener
import net.minecraft.item.ItemBow
import net.minecraft.item.ItemEgg
import net.minecraft.item.ItemEnderPearl
import net.minecraft.item.ItemSnowball
import net.minecraft.network.play.client.CPacketEntityAction
import net.minecraft.network.play.client.CPacketPlayer
import net.minecraft.network.play.client.CPacketPlayerDigging
import net.minecraft.network.play.client.CPacketPlayerTryUseItem
import net.minecraft.util.EnumHand

/**
 * @author _kisman_
 * @since 16:02 of 26.05.2022
 */
class BowExploit : Module(
    "BowExploit",
    "Just bowbomb",
    Category.EXPLOIT
) {
    private val items = register(SettingGroup(Setting("Items", this)))
    private val bow = register(items.add(Setting("Bow", this, true)))
    private val eggs = register(items.add(Setting("Eggs", this, true)))
    private val pearls = register(items.add(Setting("Pearls", this, true)))
    private val snowballs = register(items.add(Setting("Snow Balls", this, true)))

    private val mode = register(Setting("Mode", this, Mode.Default))
    
    private val default = register(SettingGroup(Setting("Default", this)))
    private val timeOut = register(default.add(Setting("TimeOut", this, 5000.0, 100.0, 20000.0, NumberType.TIME)))
    private val spoofs = register(default.add(Setting("Spoofs", this, 10.0, 1.0, 300.0, true)))
    private val bypass = register(default.add(Setting("Bypass", this, false)))

    private val rewrite = register(SettingGroup(Setting("Rewrite", this)))
    private val damage = register(rewrite.add(Setting("Damage", this, 100.0, 10.0, 150.0, true)))
    private val test = register(rewrite.add(Setting("Test", this, false)))

    private val debug = register(Setting("Debug", this, true))

    private var shootingD = false;
    private var lastShootTimeD = 0L

    override fun onEnable() {
        super.onEnable()
        Kisman.EVENT_BUS.subscribe(send)
    }

    override fun onDisable() {
        super.onDisable()
        Kisman.EVENT_BUS.unsubscribe(send)
    }

    override fun update() {
        if(mc.player == null || mc.world == null || mode.valEnum != Mode.Rewrite) {
            return
        }

        if(!mc.player.heldItemMainhand.isEmpty) {
            if(
                (mc.player.heldItemMainhand.item is ItemBow)
                //TODO
            ) {
                if(mc.player.itemInUseMaxCount > 0 && test.valBoolean) {
                        mc.player.rotationPitch = 0f
                    }
                    if(mc.player.itemInUseMaxCount > 10) {
                        mc.player.connection.sendPacket(CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SNEAKING))
                        mc.player.connection.sendPacket(CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING))
                        mc.player.connection.sendPacket(CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SNEAKING))
                }

                for(i in 0..damage.valInt) {
                    mc.player.connection.sendPacket(CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true))
                    mc.player.connection.sendPacket(CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false))
                }

                if(debug.valBoolean) {
                    ChatUtility.complete().printClientModuleMessage("Spoofed!")
                }

                mc.gameSettings.keyBindUseItem.pressed = false
            }
        }
    }

    private val send = Listener<PacketEvent.Send>(EventHook {
        val packet = it.packet
        if(mode.valEnum == Mode.Default) {
            if(packet is CPacketPlayerDigging) {
                if(packet.action == CPacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                    if(!mc.player.heldItemMainhand.isEmpty && mc.player.heldItemMainhand.item is ItemBow && bow.valBoolean) {
                        doSpoofs()
                        if(debug.valBoolean && !shootingD) {
                            ChatUtility.info().printClientModuleMessage("Trying to spoof.")
                        }
                    }
                }
            }

            if(packet is CPacketPlayerTryUseItem) {
                if(packet.hand == EnumHand.MAIN_HAND) {
                    if(!mc.player.heldItemMainhand.isEmpty) {
                        if(
                            (mc.player.heldItemMainhand.item is ItemEgg && eggs.valBoolean)
                            || (mc.player.heldItemMainhand.item is ItemEnderPearl && pearls.valBoolean)
                            || (mc.player.heldItemMainhand.item is ItemSnowball && snowballs.valBoolean)
                        ) {
                            doSpoofs()
                        }
                    }
                }
            }
        }
    })

    private fun doSpoofs() {
        if(System.currentTimeMillis() - lastShootTimeD >=timeOut.valInt) {
            shootingD = false;
            lastShootTimeD = System.currentTimeMillis()

            mc.player.connection.sendPacket(CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING))

            for(i in 0..spoofs.valInt) {
                if(bypass.valBoolean) {
                    mc.player.connection.sendPacket(CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false))
                    mc.player.connection.sendPacket(CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true))
                } else {
                    mc.player.connection.sendPacket(CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true))
                    mc.player.connection.sendPacket(CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false))
                }
            }

            if(debug.valBoolean) {
                ChatUtility.complete().printClientModuleMessage("Spoofed!")
            }
            shootingD = true
        }
    }

    enum class Mode {
        Default,
        Rewrite
    }
}