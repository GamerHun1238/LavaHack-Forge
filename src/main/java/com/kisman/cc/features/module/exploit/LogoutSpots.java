package com.kisman.cc.features.module.exploit;

import com.kisman.cc.features.module.Category;
import com.kisman.cc.features.module.Module;
import com.kisman.cc.settings.Setting;
import com.kisman.cc.settings.SettingEnum;
import com.kisman.cc.util.chat.cubic.ChatUtility;
import net.minecraft.entity.player.EntityPlayer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

public class LogoutSpots extends Module {

    private final SettingEnum<RangeMode> rangeMode = new SettingEnum<>("RangeMode", this, RangeMode.Range).register();
    private final Setting range = register(new Setting("Range", this, 50, 0, 200, true).setVisible(() -> rangeMode.getValEnum() == RangeMode.Range));
    private final Setting dimension = register(new Setting("Dimension", this, false));

    public LogoutSpots(){
        super("LogoutSpots", Category.EXPLOIT);
    }

    private Set<EntityPlayer> players = null;
    private boolean notified = false;

    @Override
    public void update() {
        if (mc.player == null || mc.world == null) {
            players = null;
            notified = false;
            return;
        }

        if(mc.isSingleplayer() && !notified){
            ChatUtility.warning().printClientModuleMessage("You are in single player");
            notified = true;
            return;
        }

        if(players == null){
            players = Collections.newSetFromMap(new ConcurrentHashMap<>());
            players.addAll(mc.world.playerEntities);
            return;
        }

        List<EntityPlayer> curEntities = mc.world.playerEntities;
        List<EntityPlayer> loggedOut = new ArrayList<>();
        for(EntityPlayer player : players){
            if(!curEntities.contains(player))
                loggedOut.add(player);
        }
        loggedOut = loggedOut.stream()
                .filter(player -> mc.player.getDistanceSq(player) <= range.getValDouble())
                .collect(Collectors.toList());
        for(EntityPlayer player : loggedOut)
            ChatUtility.info().printClientModuleMessage(player.getName() + " logged out at "
                    + "x: " + player.posX + ", y: " + player.posY + ", z: " + player.posY + getDimensionData(player));
    }

    private String getDimensionData(EntityPlayer player){
        int dimension = player.dimension;
        String dimensionData = "";
        if(this.dimension.getValBoolean()){
            dimensionData = " in the ";
            switch (dimension){
                case 1:
                    dimensionData += "Overworld";
                    break;
                case 2:
                    dimensionData += "Nether";
                    break;
                case 3:
                    dimensionData += "End";
                    break;
                default:
                    dimensionData += "(Unknown Dimension)";
                    break;
            }
        }
        return dimensionData;
    }

    private enum RangeMode {
        None,
        Range
    }
}
