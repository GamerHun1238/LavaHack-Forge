package com.kisman.cc.features.module.exploit

import com.kisman.cc.Kisman
import com.kisman.cc.event.events.PacketEvent
import com.kisman.cc.features.module.Category
import com.kisman.cc.features.module.Module
import me.zero.alpine.listener.EventHook
import me.zero.alpine.listener.Listener
import net.minecraft.entity.item.EntityEnderPearl
import net.minecraft.entity.player.EntityPlayer
import net.minecraft.network.Packet
import net.minecraft.network.play.client.CPacketPlayer
import net.minecraft.network.play.server.SPacketSpawnObject
import java.util.concurrent.ConcurrentLinkedQueue


/**
 * @author _kisman_
 * @since 19:46 of 05.06.2022
 */
class FakePearl : Module(
    "FakePearl",
    "Just skidded ik",
    Category.EXPLOIT
) {
    private val packets = ConcurrentLinkedQueue<CPacketPlayer>()
    private var hasThrown = false
    private var thrownPearlId = -1

    override fun onEnable() {
        super.onEnable()
        Kisman.EVENT_BUS.subscribe(send)
        Kisman.EVENT_BUS.subscribe(receive)
    }

    override fun onDisable() {
        super.onDisable()
        Kisman.EVENT_BUS.unsubscribe(send)
        Kisman.EVENT_BUS.unsubscribe(receive)
    }

    private val send = Listener<PacketEvent.Send>(EventHook {
        if(thrownPearlId != -1 && it.packet is CPacketPlayer) {
            packets.add(it.packet as CPacketPlayer)
            it.cancel()
        }
    })

    private val receive = Listener<PacketEvent.Receive>(EventHook {
        if(mc.player.onGround) {
            val packet = it.packet
            if (packet is SPacketSpawnObject && packet.type == 65) {
                mc.world.playerEntities.stream().min(Comparator.comparingDouble<EntityPlayer> { player: EntityPlayer ->
                    player.getDistance(
                        packet.x,
                        packet.y,
                        packet.z
                    )
                }).ifPresent {
                    mc.player.motionX = 0.0;
                    mc.player.motionY = 0.0;
                    mc.player.motionZ = 0.0;
                    mc.player.movementInput.moveForward = 0.0f;
                    mc.player.movementInput.moveStrafe = 0.0f;
                    mc.player.connection.sendPacket(
                        CPacketPlayer.Position(
                            mc.player.posX,
                            mc.player.posY + 1.0,
                            mc.player.posZ,
                            false
                        )
                    );
                    hasThrown = true;
                    thrownPearlId = packet.entityID;
                }
            }
        }
    })

    override fun update() {
        if(mc.player == null || mc.world == null) {
            return
        }

        if(thrownPearlId != -1) {
            for(entity in mc.world.loadedEntityList) {
                if(entity.getEntityId() != thrownPearlId || entity !is EntityEnderPearl || !entity.isDead) continue

                thrownPearlId = -1
                hasThrown = false
            }
        } else if(packets.isNotEmpty()) {
            do {
                mc.player.connection.sendPacket(packets.poll() as Packet<*>)
            } while (!packets.isEmpty())
        }
    }
}