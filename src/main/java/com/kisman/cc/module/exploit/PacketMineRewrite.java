package com.kisman.cc.module.exploit;

import com.kisman.cc.Kisman;
import com.kisman.cc.event.events.EventDamageBlock;
import com.kisman.cc.event.events.PacketEvent;
import com.kisman.cc.module.Category;
import com.kisman.cc.module.Module;
import com.kisman.cc.settings.Setting;
import com.kisman.cc.util.BlockBreakDelta;
import com.kisman.cc.util.chat.cubic.ChatUtility;
import com.kisman.cc.util.chat.other.ChatUtils;
import com.kisman.cc.util.thread.TaskQueue;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.server.SPacketBlockChange;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.util.Arrays;

public class PacketMineRewrite extends Module {

    private final Setting speed = register(new Setting("Speed", this, 0.8f, 0.5f, 1, false));
    private final Setting swap = register(new Setting("Switch", this, "None", Arrays.asList("None", "Vanilla", "Normal", "Silent")));
    private final Setting queue = register(new Setting("Queue", this, false));

    private BlockBreakDelta blockBreakDelta = null;

    private TaskQueue taskQueue;

    private boolean done = true;

    int oldSlot;

    public PacketMineRewrite(){
        super("PacketMineRewrite", Category.EXPLOIT);
        this.taskQueue = new TaskQueue();
        taskQueue.setDoneCheck(() -> done);
    }

    @Override
    public void onEnable(){
        Kisman.EVENT_BUS.subscribe(packetListener);
        Kisman.EVENT_BUS.subscribe(damageBlockListener);
        blockBreakDelta = null;
        done = true;
        oldSlot = -1;
    }

    @Override
    public void onDisable(){
        Kisman.EVENT_BUS.unsubscribe(packetListener);
        Kisman.EVENT_BUS.unsubscribe(damageBlockListener);
        blockBreakDelta = null;
        done = false;
        oldSlot = -1;
    }

    private final Listener<PlayerInteractEvent.LeftClickBlock> damageBlockListener = new Listener<>(event -> {
        if(mc.world == null || mc.player == null) return;

        if(!isToggled()) return;

        ChatUtility.message().printClientModuleMessage("Damaged block");

        if(done || queue.getValBoolean()) {
            done = false;
            taskQueue.add(() -> doPacketMine(event.getPos()));
            blockBreakDelta = new BlockBreakDelta(event.getPos());
            blockBreakDelta.start();
        }
    });

    @Override
    public void update(){
        if(mc.player == null || mc.world == null) return;

        oldSlot = mc.player.inventory.currentItem;

        if(blockBreakDelta == null) return;

        blockBreakDelta.updateBestStack();

        ChatUtility.message().printClientModuleMessage("" + blockBreakDelta.getBlockProgress());

        if(blockBreakDelta.getBlockProgress() >= speed.getValDouble()){
            done = true;
            swap(blockBreakDelta.getSlot(), false);
            return;
        }

        taskQueue.runNextIfDone();
    }

    private void doPacketMine(BlockPos pos){
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, pos, EnumFacing.DOWN));
    }

    private void swap(int slot, boolean swapBack){
        switch(swap.getValString()){
            case "None":
                break;
            case "Vanilla":
                if(swapBack) break;
                mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
                mc.player.inventory.currentItem = slot;
                break;
            case "Normal":
                mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
                mc.player.inventory.currentItem = slot;
                break;
            case "Silent":
                mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
                break;
        }
    }

    private final Listener<PacketEvent.Receive> packetListener = new Listener<>(event -> {
        if(!(event.getPacket() instanceof SPacketBlockChange)) return;
        SPacketBlockChange packetBlockChange = (SPacketBlockChange) event.getPacket();
        if(packetBlockChange.getBlockPosition() == blockBreakDelta.getBlockPos()) swap(oldSlot, true);
    });
}
