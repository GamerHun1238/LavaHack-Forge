package com.kisman.cc.module.client

import com.kisman.cc.gui.csgo.components.Slider
import com.kisman.cc.module.Category
import com.kisman.cc.module.Module
import com.kisman.cc.settings.Setting

class Baritone : Module(
        "Baritone",
        "Config of baritone integration",
        Category.CLIENT
) {
    val allowBreak = register(Setting("Allow Break", this, true))
    val allowSprint = register(Setting("Allow Sprint", this, true))
    val allowPlace = register(Setting("Allow Place", this, true))
    val allowInventory = register(Setting("Allow Inventory", this, false))
    val assumeExternalAutoTool = register(Setting("Assume External Auto Tool", this, false))
    val autoTool = register(Setting("Auto Tool", this, true))
    val blockPlacementPenalty = register(Setting("Block Placement Penalty", this, 20.0, 0.1, 50.0, false))
    val blockBreakAdditionalPenalty = register(Setting("Block Break Additional Penalty", this, 2.0, 0.1, 20.0, false))
    val jumpPenalty = register(Setting("Jump Penalty", this, 2.0, 0.1, 20.0, false))
    val walkOnWaterOnePenalty = register(Setting("Walk On Water One Penalty", this, 3.0, 0.1, 20.0, false))
    val allowWaterBucketFall = register(Setting("Allow Water Bucket Fall", this, true))
    val assumeWalkOnWater = register(Setting("Assume Walk On Water", this, false))
    val assumeWalkOnLava = register(Setting("Assume Walk On Lava", this, false))
    val assumeStep = register(Setting("Assume Step", this, false))
    val assumeSafeWalk = register(Setting("Assume Safe Walk", this, false))
    val allowJumpAt256 = register(Setting("Allow Jump At 256", this, false))
    val allowParkourAscend = register(Setting("Allow Parkour Ascend", this, true))
    val allowDiagonalDescend = register(Setting("Allow Diagonal Descend", this, false))
    val allowDiagonalAscend = register(Setting("Allow Diagonal Ascend", this, false))
    val allowDownwards = register(Setting("Allow Downwards", this, true))
    val avoidBreakingMultiplier = register(Setting("Avoid Breaking Multiplier",this, 0.1, 0.1, 1.0, false))
    val buildIgnoreExisting = register(Setting("Build Ignore Existing", this, false))
    val buildIgnoreDirection = register(Setting("Build Ignore Direction", this, false))
    val avoidUpdatingFallingBlocks = register(Setting("Avoid Updating Falling Blocks", this, true))
    val allowVines = register(Setting("Allow Vines", this, false))
    val allowWalkOnBottomSlab = register(Setting("Allow Walk On Bottom Slab", this, true))
    val allowParkour = register(Setting("Allow Parkour", this, false))
    val allowParkourPlace = register(Setting("Allow Parkour Place", this, false))
    val considerPotionEffects = register(Setting("Consider Potion Effects", this, true))
    val sprintAscends = register(Setting("Sprint Ascends", this, true))
    val overshootTraverse = register(Setting("Overshoot Traverse", this, true))
    val pauseMiningForFallingBlocks = register(Setting("Pause Mining For Falling Blocks", this, true))
    val rightClickSpeed = register(Setting("Right Click Speed", this, 4.0, 1.0, 10.0, true))
    val blockReachDistance = register(Setting("Block Reach Distance", this, 4.5, 3.0, 6.0, false))
    val randomLooking = register(Setting("Random Looking", this, 0.01, 0.01, 0.1, false))
    val costHeuristic = register(Setting("Cost Heuristic", this, 3.563, 3.0, 4.0, false))
    val backtrackCostFavoringCoefficient = register(Setting("Backtrack Cost Favoring Coefficient", this, 0.5, 0.1, 1.0, false))
    val avoidance = register(Setting("Avoidance", this, false))
    val mobSpawnerAvoidanceCoefficient = register(Setting("Mob Spawner Avoidance Coefficient", this, 2.0, 1.0, 3.0, false))
    val mobSpawnerAvoidanceRadius = register(Setting("Mob Spawner Avoidance Radius", this, 16.0, 10.0, 20.0, true))
    val modSpawneravoidanceCoefficient = register(Setting("Mod Spawner Avoidance Coefficient", this, 1.5, 1.0, 2.0, false))
    val mobAvoidanceRadius = register(Setting("Mob Spawner Avoidance Radius", this, 8.0, 5.0, 15.0, true))
    val rightClickContainerOnArrival = register(Setting("Right Click Container On Arrival", this, true))
    val enterPortal = register(Setting("Enter Portal", this, true))
    val minimumImprovementRepropagation = register(Setting("Min Improvement Repropagation", this, true))
    val cutoffAtLoadBoundary = register(Setting("Cutoff At Load Boundary", this, false))
    val maxCostIncrease = register(Setting("Max Cost Increase", this, 10.0, 1.0, 20.0, false))
    val pathCutoffFactor = register(Setting("Path Cutoff Factor", this, 0.9, 0.1, 1.0, false))
    val pathCutoffMinimumLength = register(Setting("Path Cutoff Min Length", this, 30.0, 20.0, 40.0, true))
    val planningTickLookahead = register(Setting("Planning Tick Lookahead", this, 150.0, 100.0, 200.0, true))
    val pathingMapDefaultSize = register(Setting("Pathing Map Default Size", this, 1024.0, 512.0, 2048.0, true))
    val pathingMapLoadFactor = register(Setting("Pathing Map Load Factor", this, 0.75, 0.5, 1.0, false))
    val maxFallHeightNoWater = register(Setting("Max Fall Height No Water", this, 3.0, 0.0, 10.0, true))
    val maxFallHeightBucket = register(Setting("Max Fall Height Bucket", this, 20.0, 10.0,  30.0, true))
    val allowOvershootDiagonalDescend = register(Setting("Allow Overshoot Diagonal Descend", this, true))
    val simplifyUnloadedYCoord = register(Setting("Simplify Unloaded Y Coord", this, true))
    //repackOnAnyBlockChange
    val movementTimeoutTicks = register(Setting("Movement Timeout Ticks", this, 100.0, 50.0, 150.0, true))
    val primaryTimeout = register(Setting("Primary Timeout", this, 500.0, 200.0, 1000.0, Slider.NumberType.TIME))
    val failureTimeout = register(Setting("Failure Timeout", this, 2000.0, 1000.0, 3000.0, Slider.NumberType.TIME))
    val planAheadPrimaryTimeout = register(Setting("Plan Ahead Primary Timeout", this, 4000.0, 2000.0, 8000.0, Slider.NumberType.TIME))
    val planAheadFailureTimeout = register(Setting("Plan Ahead Failure Timeout", this, 5000.0, 2000.0, 8000.0, Slider.NumberType.TIME))
    val slowPath = register(Setting("Slow Path", this, false))
    val slowPathTimeDelay = register(Setting("Slow Path Time Delay", this, 100.0, 50.0, 200.0, Slider.NumberType.TIME))
    val slowPathTimeout = register(Setting("Slow Path Timeout", this, 40000.0, 30000.0, 50000.0, Slider.NumberType.TIME))
    val doBedWaypoints = register(Setting("Do Bed Waypoints", this, true))
    val doDeathWaypoints = register(Setting("Do Death Waypoints", this, true))
    val chunkCaching = register(Setting("Chunk Caching", this, true))
    val pruneRegionsFromRAM = register(Setting("Prune Regions From RAM", this, true))
    val backfill = register(Setting("Backfill", this, false))
    val logAsToast = register(Setting("Log As Toast", this, false))
    val toastTimer = register(Setting("Toast Timer", this, 5000.0, 2000.0, 7000.0, Slider.NumberType.TIME))
    val chatDebug = register(Setting("Chat Debug", this, true))
    val chatControlAnyway = register(Setting("Chat Control Anyway", this, false))
    val renderPath = register(Setting("Render Path", this, true))
    val renderPathAsLine = register(Setting("Render Path As Line", this, false))
    val renderGoal = register(Setting("Render Goal", this, true))
    //renderGoalAnimated
    val renderSelectionBoxes = register(Setting("Render Selection Boxes", this, true))
    val renderGoalIgnoreDepth = register(Setting("Render Goal Ignore Depth", this, true))
    val renderGoalXZBeacon = register(Setting("Render Goal XZ Beacon", this, false))
    val renderSelectionBoxesIgnoreDeath = register(Setting("Render Selection Boxes Ignore Death", this, true))
    val renderPathIgnoreDeath = register(Setting("Render Path Ignore Death", this, true))
    val pathRenderLineWidthPixels = register(Setting("Path Render Line Width Pixels", this, 5.0, 1.0, 10.0, false))
    val goalRenderLineWidthPixels = register(Setting("Goal Render Line Width Pixels", this, 3.0, 1.0, 7.0, false))
    val fadePath = register(Setting("Fade Path", this, false))
    val freeLook = register(Setting("Free Look", this, true))
    val antiCheatCompability = register(Setting("Anti Chat Compatibility", this, true))
    val pathThroughCachedOnly = register(Setting("Path Through Cached Only", this, false))
    val sprintINWater = register(Setting("Sprint In Water", this, true))
    val blacklistClosestOnFailure = register(Setting("Blacklist Closest On Failure", this, true))
    //renderCachedChunks
    //cachedChunksOpacity
    val prefixControl = register(Setting("Prefix Control", this, true))
    //prefix <- string value
    val shortBaritonePrefix = register(Setting("Short Baritone Prefix", this, false))
    val echoCommands = register(Setting("Echo Commands", this, true))
    val censorCoordinates = register(Setting("Censor Coords", this, false))
    val censorRanCommands = register(Setting("Censor Ran Commands", this, false))
    val itemSaver = register(Setting("Item Saver", this, false))
    val itemSaverThreshold = register(Setting("Item Saver Threshold", this, 10.0, 1.0, 15.0, true))
    val preferSilkTouch = register(Setting("Prefer Silk Touch", this, false))
    val walkWhileBreaking = register(Setting("Walk WhileBreaking", this, true))
    val splicePath = register(Setting("Splice Path", this, true))
    val maxPathHistoryLength = register(Setting("Max Path History Length", this, 300.0, 200.0, 500.0, true))
    val pathHistoryCutoffAmount = register(Setting("Path History Cutoff Amount", this, 50.0, 25.0, 70.0, true))
    val mineGoalUpdateInterval = register(Setting("Mine Goal Update Interval", this, 5.0, 2.0, 10.0, true))
    val maxCachedWorldScanCount = register(Setting("Max Cached World Scan Count", this, 10.0, 5.0, 20.0, true))
    val minYLevelWhileMining = register(Setting("Min Y Level While Mining", this, 0.0, 0.0, 256.0, true))
    val allowOnlyExposedOres = register(Setting("Allow Only Exposed Ores", this, false))
    val allowOnlyExposedOresDistance = register(Setting("Allow Only Exposed Ores Dist", this, 1.0, 1.0, 5.0, true))
    val exploreForBlocks = register(Setting("Explore For Blocks", this, true))
    val worldExploringChunkOffset = register(Setting("World Exploring Chunk Offset", this, 0.0, 0.0, 5.0, true))
    val exploreChunkSetMinimumSize = register(Setting("Explore Chunk Set Minimum Size", this, 10.0, 5.0, 15.0, true))//858 line into baritone.api.Settings class
    //TODO

    override fun isBeta(): Boolean {
        return true
    }
}