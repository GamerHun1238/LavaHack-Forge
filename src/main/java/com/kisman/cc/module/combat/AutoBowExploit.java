package com.kisman.cc.module.combat;

import com.kisman.cc.Kisman;
import com.kisman.cc.event.events.PacketEvent;
import com.kisman.cc.module.Category;
import com.kisman.cc.module.Module;
import com.kisman.cc.settings.Setting;
import com.kisman.cc.util.Render2DUtil;
import com.kisman.cc.util.customfont.CustomFontUtil;
import i.gishreloaded.gishcode.utils.TimerUtils;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.awt.*;

public class AutoBowExploit extends Module {
    private Setting autoFire = new Setting("AutoFire", this, true);
    private Setting bypass = new Setting("Bypass", this, false);

    private Setting timeOut = new Setting("TimeOut", this, 5000, 100, 20000, true);
    private Setting spoofs = new Setting("Spoofs", this, 10, 1, 300, true);

    private Setting renderText = new Setting("Text", this, true);
    private Setting renderBar = new Setting("Bar", this, true);
    private Setting yPosRender = new Setting("YPos", this, 0, 0, 120, true);

    private TimerUtils timer = new TimerUtils();

    private boolean shot = false;
    private int ticks = 0;
    private long lastShotTime = 0L;
    private long percent = 0;

    public AutoBowExploit() {
        super("AutoBowExploit", "AWP", Category.COMBAT);

        setmgr.rSetting(autoFire);
        setmgr.rSetting(bypass);
        setmgr.rSetting(timeOut);
        setmgr.rSetting(spoofs);

        setmgr.rSetting(new Setting("RenderLine", this, "Render"));
        setmgr.rSetting(renderText);
        setmgr.rSetting(renderBar);
        setmgr.rSetting(yPosRender);
    }

    public void onEnable() {
        Kisman.EVENT_BUS.subscribe(listener);

        shot = false;
        ticks = 0;
        lastShotTime = System.currentTimeMillis();
    }

    public void onDisable() {
        Kisman.EVENT_BUS.unsubscribe(listener);

        ticks = 0;
    }

    public void update() {
        if (autoFire.getValBoolean() && mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem() instanceof ItemBow && mc.player.isHandActive() && mc.player.getItemInUseMaxCount() >= 4 && autoFire.getValBoolean() && percent >= 100L) {
            ++this.ticks;
            if (this.ticks >= 12) {
                mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, mc.player.getHorizontalFacing()));
                mc.player.connection.sendPacket(new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));
                mc.player.stopActiveHand();
                this.ticks = 0;
            }
        }
        this.percent = (long) Math.min((System.currentTimeMillis() - this.lastShotTime) / (((Number)this.timeOut.getValInt()).doubleValue() * 1000.0) * 100.0, 100.0);
    }

    @SubscribeEvent
    public void onRender(RenderGameOverlayEvent event) {
        GlStateManager.pushMatrix();
        ScaledResolution sr = new ScaledResolution(mc);
        if (this.renderText.getValBoolean()) {
            CustomFontUtil.drawStringWithShadow(String.format("%s/100", this.percent) + "%", (int)(sr.getScaledWidth() / 2.0f - CustomFontUtil.getStringWidth(String.format("%s/100", this.percent) + "%") / 2.0f), (int)(sr.getScaledHeight() / 2.0f + 10.0f + ((Number)this.yPosRender.getValInt()).intValue()), new Color(170, 170, 170).getRGB());
        }

        if (this.renderBar.getValBoolean()) {
            Render2DUtil.drawRect(sr.getScaledWidth() / 2.0f - 21.0f, sr.getScaledHeight() / 2.0f + 20.0f + (this.yPosRender.getValInt()), sr.getScaledWidth() / 2.0f + 23.0f, sr.getScaledHeight() / 2.0f + 25.0f + (yPosRender.getValInt()), new Color(0, 0, 0, 140).getRGB());
            Render2DUtil.drawRect(sr.getScaledWidth() / 2.0f - 20.0f, sr.getScaledHeight() / 2.0f + 21.0f + (this.yPosRender.getValInt()), sr.getScaledWidth() / 2.0f - 20.0f + this.percent * 0.42f, sr.getScaledHeight() / 2.0f + 24.0f + ((Number)this.yPosRender.getValInt()).intValue(), Color.red.getRGB());
        }

        GlStateManager.popMatrix();
    }

    @EventHandler
    private final Listener<PacketEvent.Send> listener = new Listener<>(event -> {
        if (event.getPacket() instanceof CPacketPlayerDigging) {
            CPacketPlayerDigging packet = (CPacketPlayerDigging)event.getPacket();
            if (packet.getAction() == CPacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                final ItemStack handStack = mc.player.getHeldItem(EnumHand.MAIN_HAND);
                if (!handStack.isEmpty() && handStack.getItem() != null && handStack.getItem() instanceof ItemBow && System.currentTimeMillis() - this.lastShotTime >= (timeOut.getValInt()) * 1000) {
                    shot = true;
                    lastShotTime = System.currentTimeMillis();
                    mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));
                    for (int index = 0; index < ((Number)this.spoofs.getValInt()).intValue() * 10; ++index) {
                        if (bypass.getValBoolean()) {
                            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.0E-5, mc.player.posZ, false));
                            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1.0E-5, mc.player.posZ, true));
                        } else {
                            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1.0E-5, mc.player.posZ, true));
                            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.0E-5, mc.player.posZ, false));
                        }
                    }
                    shot = false;
                }
            }
        }
    });
}
